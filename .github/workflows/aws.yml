on:
  push:
    branches: main

name: Deploy to Amazon ECS
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
#     - uses: microsoft/variable-substitution@v1 
#       with:
#         files: 'ecsfargate.json'
#       env:
#         .containerDefinitions[0].name: apigateway-258

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v1

#     - name: Build, tag, and push image to Amazon ECR
#       id: build-image
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         ECR_REPOSITORY: my-ecr-repo
#         IMAGE_TAG: ${{ github.sha }}
#       run: |
#         # Build a docker container and
#         # push it to ECR so that it can
#         # be deployed to ECS.
#         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#         echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
#     - name: TS file to json
#       run: |
#         NAME=$APIGATEWAY node fargate.ts >> fargate1.json
#         pwd 
#         ls
#         cat fargate1.json
#       env:
#         APIGATEWAY: ${{ secrets.APIGATEWAY }}
     
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: .github/workflows/ecsfargate.json
        container-name: apigateway-8442
        image: harishsundhar/fargate:apigateway-8442

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        cluster: Cost-Estimation-Testing
        wait-for-service-stability: true
        command: |
          aws ecs run-task --cluster Cost-Estimation-Testing --task-definition APIFargate:10
          echo "$(aws ecs run-task --cluster Cost-Estimation-Testing --task-definition APIFargate:10)"
